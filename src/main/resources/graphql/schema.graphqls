type Query {
    profile: User
}

type Mutation {
    # User Auth
    signUp(input: SignUpInput): AuthPayload
    userSignIn(input: SignInInput): AuthPayload
    adminSignIn(input: SignInInput): AuthPayload
    confirmEmail: AuthPayload
    resetPasswordRequest(email: String!): AuthPayload
    resetPassword(password: String!): AuthPayload

    #Admin Auth
    addAdmin(email: String!): AuthPayload
    adminOnboarding(input: AdminOnboardingInput): User
}


type User {
    id: ID!
    name: String!
    email: String!
    profileImg: String
    roles: [Role!]!
    phone: Int
}

type Role {
    id: ID!
    name: String!
}

type AuthPayload {
    token: String
    message: String!
}

input SignUpInput {
    name: String!
    email: String!
    password: String!
    roleId: ID!
}

input SignInInput {
    email: String!
    password: String!
}

input AdminOnboardingInput {
    name: String!
    password: String!
    roleId: ID!
}
scalar Instant